<!doctype html>
<html lang="hi">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>‡§Æ‡§ú‡§º‡•á‡§¶‡§æ‡§∞ ‡§ú‡§æ‡§®‡§µ‡§∞ ‡§ó‡•á‡§Æ ‚Äî ‡§¨‡§ö‡•ç‡§ö‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è</title>
  <style>
    :root{
      --bg:#FFFBF0;
      --card:#FFFFFF;
      --accent:#FF7A59;
      --muted:#777;
      --shadow: 0 8px 18px rgba(0,0,0,0.12);
    }
    html,body{height:100%;margin:0;font-family:Inter, system-ui, sans-serif;background:linear-gradient(180deg,#FFF9F2,#FFF3E6);color:#333;}
    .app{
      max-width:900px;margin:18px auto;padding:18px;
      display:flex;flex-direction:column;gap:16px;
    }
    header{display:flex;align-items:center;justify-content:space-between;gap:12px;}
    .title{font-size:20px;font-weight:700;display:flex;flex-direction:column;}
    .subtitle{font-size:13px;color:var(--muted);margin-top:4px}
    .panel{background:var(--card);border-radius:16px;box-shadow:var(--shadow);padding:14px;}
    .top-row{display:flex;align-items:center;justify-content:space-between;gap:12px}
    .score{
      display:flex;align-items:center;gap:10px;font-weight:700;
    }
    .score .num{background:linear-gradient(90deg,#FFB199,#FF7A59);color:white;padding:6px 12px;border-radius:12px;box-shadow:0 6px 12px rgba(255,122,89,0.2)}
    .controls{display:flex;gap:8px;align-items:center;}
    button{
      border:0;padding:8px 12px;border-radius:12px;font-weight:600;background:#FFF4F1;cursor:pointer;
      box-shadow:0 6px 12px rgba(0,0,0,0.06);
    }
    button.reset{background:#fff;border:1px solid #F0D7D0}
    .grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(140px,1fr));gap:14px;margin-top:10px}
    .card{
      background:linear-gradient(180deg,#fff,#FFF7F5);
      border-radius:16px;padding:14px;display:flex;flex-direction:column;align-items:center;justify-content:center;gap:8px;
      transition:transform .14s ease, box-shadow .14s;user-select:none;touch-action:manipulation;
    }
    .card:active{transform:scale(.98)}
    .animal-btn{font-size:48px;line-height:1;display:inline-block;width:88px;height:88px;border-radius:16px;display:flex;align-items:center;justify-content:center;background:#FFF;color:#000;box-shadow:0 8px 20px rgba(0,0,0,0.08);cursor:pointer;}
    .name{font-size:16px;font-weight:700}
    .hint{font-size:13px;color:var(--muted)}
    /* pop animation when clicked */
    .pop{
      animation:pop .5s ease forwards;
    }
    @keyframes pop{
      0%{transform:scale(1);filter:drop-shadow(0 0 0 rgba(255,122,89,0))}
      40%{transform:scale(1.18);filter:drop-shadow(0 16px 30px rgba(255,122,89,0.14))}
      100%{transform:scale(1);filter:drop-shadow(0 0 0 rgba(255,122,89,0))}
    }
    /* confetti pieces container (absolute) */
    #confettiCanvas{position:fixed;left:0;top:0;pointer-events:none;z-index:9999}
    footer{font-size:12px;color:var(--muted);text-align:center;margin-top:6px}
    /* big friendly text for small screens */
    @media (max-width:420px){
      .animal-btn{width:72px;height:72px;font-size:40px}
      .name{font-size:15px}
    }
  </style>
</head>
<body>
  <canvas id="confettiCanvas"></canvas>

  <div class="app">
    <header>
      <div class="title">
        <div>üêæ ‡§Æ‡§ú‡§º‡•á‡§¶‡§æ‡§∞ ‡§ú‡§æ‡§®‡§µ‡§∞ ‚Äî ‡§¨‡§ö‡•ç‡§ö‡•ã‡§Ç ‡§ï‡§æ ‡§ñ‡•á‡§≤</div>
        <div class="subtitle">‡§ú‡§æ‡§®‡§µ‡§∞ ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•ã, ‡§Ü‡§µ‡§æ‡§ú‡§º ‡§∏‡•Å‡§®‡•ã ‡§î‡§∞ ‡§Ö‡§Ç‡§ï ‡§¨‡§¢‡§º‡§æ‡§ì! (3-6 ‡§∏‡§æ‡§≤)</div>
      </div>
      <div class="score panel">
        <div style="display:flex;flex-direction:column;align-items:flex-end">
          <div style="font-size:12px;color:var(--muted)">‡§∏‡•ç‡§ï‡•ã‡§∞</div>
          <div class="num" id="score">0</div>
        </div>
      </div>
    </header>

    <div class="panel">
      <div class="top-row">
        <div style="display:flex;flex-direction:column">
          <div style="font-weight:700">‡§ö‡•Å‡§®‡•á‡§Ç ‡§ï‡•ã‡§à ‡§ú‡§æ‡§®‡§µ‡§∞</div>
          <div class="hint">‡§¨‡§°‡§º‡•á ‡§¨‡§ü‡§® ‡§ü‡•à‡§™ ‡§ï‡§∞‡•á‡§Ç ‚Äî ‡§Ü‡§µ‡§æ‡§ú‡§º ‡§î‡§∞ ‡§∞‡§Ç‡§ó-‡§¨‡§ø‡§∞‡§Ç‡§ó‡•á ‡§á‡§´‡•á‡§ï‡•ç‡§ü ‡§ï‡•á ‡§∏‡§æ‡§•!</div>
        </div>
        <div class="controls">
          <button id="helpBtn">‡§ï‡•à‡§∏‡•á ‡§ñ‡•á‡§≤‡•á‡§Ç</button>
          <button class="reset" id="resetBtn">‡§∞‡•Ä‡§∏‡•á‡§ü</button>
        </div>
      </div>

      <div class="grid" id="grid">
        <!-- cards generated by JS -->
      </div>
    </div>

    <footer>‡§¨‡§ß‡§æ‡§à! ‡§ú‡§ø‡§§‡§®‡•á ‡§ú‡§º‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§â‡§§‡§®‡§æ ‡§ú‡§º‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§Æ‡§ú‡§º‡§æ üéâ</footer>
  </div>

  <script>
    // ‡§õ‡•ã‡§ü‡•á ‡§¨‡§ö‡•ç‡§ö‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§∏‡§æ‡§® ‡§ó‡•á‡§Æ ‚Äî animals array ‡§Æ‡•á‡§Ç emoji, ‡§®‡§æ‡§Æ ‡§î‡§∞ sound pitch
    const animals = [
      {emoji:'üê∂', name:'‡§ï‡•Å‡§§‡•ç‡§§‡§æ', pitch:420},
      {emoji:'üê±', name:'‡§¨‡§ø‡§≤‡•ç‡§≤‡•Ä', pitch:520},
      {emoji:'üêÆ', name:'‡§ó‡§æ‡§Ø', pitch:260},
      {emoji:'üêµ', name:'‡§¨‡§Ç‡§¶‡§∞', pitch:720},
      {emoji:'üêî', name:'‡§Æ‡•Å‡§∞‡•ç‡§ó‡•Ä', pitch:620},
      {emoji:'üê∏', name:'‡§Æ‡•á‡§Ç‡§¢‡§ï', pitch:320},
    ];

    const grid = document.getElementById('grid');
    const scoreEl = document.getElementById('score');
    const helpBtn = document.getElementById('helpBtn');
    const resetBtn = document.getElementById('resetBtn');

    // create cards
    animals.forEach((a, idx) => {
      const card = document.createElement('div');
      card.className = 'card';
      card.innerHTML = `
        <div class="animal-btn" data-idx="${idx}" aria-label="${a.name}" role="button" tabindex="0">${a.emoji}</div>
        <div class="name">${a.name}</div>
      `;
      grid.appendChild(card);
    });

    // Audio: use WebAudio oscillator so no external files
    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();

    function playBeep(freq){
      try{
        const o = audioCtx.createOscillator();
        const g = audioCtx.createGain();
        o.type = 'sine';
        o.frequency.value = freq;
        g.gain.value = 0.0001;
        o.connect(g);
        g.connect(audioCtx.destination);
        const now = audioCtx.currentTime;
        // tiny attack to avoid click
        g.gain.setValueAtTime(0.0001, now);
        g.gain.exponentialRampToValueAtTime(0.12, now + 0.02);
        o.start(now);
        g.gain.exponentialRampToValueAtTime(0.0001, now + 0.35);
        o.stop(now + 0.38);
      }catch(e){
        // fallback: do nothing
        console.warn('audio error', e);
      }
    }

    // score & animations
    let score = 0;
    function updateScore(diff=1){
      score += diff;
      scoreEl.textContent = score;
      // small bounce on score
      scoreEl.animate([{transform:'scale(1)'},{transform:'scale(1.15)'},{transform:'scale(1)'}],{duration:300,easing:'ease-out'});
    }

    // confetti simple implementation
    const confettiCanvas = document.getElementById('confettiCanvas');
    const confettiCtx = confettiCanvas.getContext('2d');
    let confettiPieces = [];
    function resizeCanvas(){ confettiCanvas.width = window.innerWidth; confettiCanvas.height = window.innerHeight; }
    window.addEventListener('resize', resizeCanvas);
    resizeCanvas();

    function spawnConfetti(x,y){
      for(let i=0;i<20;i++){
        confettiPieces.push({
          x: x + (Math.random()-0.5)*40,
          y: y + (Math.random()-0.5)*20,
          vx: (Math.random()-0.5)*6,
          vy: Math.random()*-6 - 2,
          size: Math.random()*6+4,
          color: ['#FF7A59','#FFC48C','#FFD9B6','#FFB199','#FFEECC'][Math.floor(Math.random()*5)],
          life: 70 + Math.random()*20
        });
      }
    }

    function confettiTick(){
      confettiCtx.clearRect(0,0,confettiCanvas.width,confettiCanvas.height);
      confettiPieces.forEach((p, i) => {
        p.vy += 0.25; p.x += p.vx; p.y += p.vy; p.life--;
        confettiCtx.fillStyle = p.color;
        confettiCtx.fillRect(p.x, p.y, p.size, p.size*0.6);
      });
      confettiPieces = confettiPieces.filter(p => p.life>0 && p.y < confettiCanvas.height + 50);
      requestAnimationFrame(confettiTick);
    }
    confettiTick();

    // interactions
    grid.addEventListener('click', (e) => {
      const btn = e.target.closest('.animal-btn');
      if(!btn) return;
      const idx = Number(btn.dataset.idx);
      const animal = animals[idx];
      // start audio context on first user gesture (some browsers require)
      if (audioCtx.state === 'suspended') audioCtx.resume();

      // play sound with slight randomness so it feels fun
      playBeep(animal.pitch + Math.floor(Math.random()*80 - 40));
      // show pop animation on button
      btn.classList.remove('pop');
      // force reflow to restart animation
      void btn.offsetWidth;
      btn.classList.add('pop');

      // score & confetti at button center
      updateScore(1);
      // compute button position
      const rect = btn.getBoundingClientRect();
      const cx = rect.left + rect.width/2;
      const cy = rect.top + rect.height/2;
      spawnConfetti(cx, cy);
    });

    // keyboard accessibility: press Enter/Space on focused animal
    grid.addEventListener('keydown', (e) => {
      if(e.key === 'Enter' || e.key === ' '){
        const focused = document.activeElement;
        if(focused && focused.classList && focused.classList.contains('animal-btn')){
          focused.click();
          e.preventDefault();
        }
      }
    });

    helpBtn.addEventListener('click', () => {
      alert('‡§ñ‡•á‡§≤‡§®‡•á ‡§ï‡§æ ‡§§‡§∞‡•Ä‡§ï‡§æ:\\n\\n1) ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§¨‡§°‡§º‡•á ‡§ú‡§æ‡§®‡§µ‡§∞ ‡§ï‡•á ‡§®‡§ø‡§∂‡§æ‡§® (emoji) ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï/‡§ü‡•à‡§™ ‡§ï‡§∞‡•ã‡•§\\n2) ‡§Ü‡§µ‡§æ‡§ú‡§º ‡§∏‡•Å‡§®‡•ã ‡§î‡§∞ ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§∞‡§æ ‡§∏‡•ç‡§ï‡•ã‡§∞ ‡§¨‡§¢‡§º‡•á‡§ó‡§æ‡•§\\n3) ‡§∞‡•Ä‡§∏‡•á‡§ü ‡§∏‡•á ‡§´‡§ø‡§∞ ‡§∏‡•á 0 ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•ã‡•§\\n\\n‡§¨‡§ö‡•ç‡§ö‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Æ‡§ú‡§º‡•á ‡§ï‡§∞‡•ã! üéâ');
    });

    resetBtn.addEventListener('click', () => {
      score = 0; scoreEl.textContent = '0';
      // small flash effect
      document.body.animate([{filter:'brightness(1)'},{filter:'brightness(.92)'},{filter:'brightness(1)'}],{duration:360});
    });

    // set initial focus on first animal for keyboard users
    window.addEventListener('load', () => {
      const firstBtn = document.querySelector('.animal-btn');
      if(firstBtn) firstBtn.setAttribute('tabindex','0');
    });

    // make more friendly: big tap targets on mobile by focusing removal
    grid.addEventListener('touchstart', (e) => {
      // prevent 300ms delays on old browsers; no special handling needed here
    });
  </script>
</body>
</html>
