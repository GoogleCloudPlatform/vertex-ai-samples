{
  "pipelineSpec": {
    "components": {
      "comp-deploy-model": {
        "executorLabel": "exec-deploy-model",
        "inputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "project": {
              "type": "STRING"
            },
            "region": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "vertex_endpoint": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            },
            "vertex_model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-get-dataframe": {
        "executorLabel": "exec-get-dataframe",
        "inputDefinitions": {
          "parameters": {
            "bq_table": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "output_data_path": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-sklearn-train": {
        "executorLabel": "exec-sklearn-train",
        "inputDefinitions": {
          "artifacts": {
            "dataset": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "metrics": {
              "artifactType": {
                "schemaTitle": "system.Metrics",
                "schemaVersion": "0.0.1"
              }
            },
            "model": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-deploy-model": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "deploy_model"
            ],
            "command": [
              "sh",
              "-c",
              "(python3 -m ensurepip || python3 -m ensurepip --user) && (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet                 --no-warn-script-location 'google-cloud-aiplatform' 'joblib' 'sklearn' 'kfp==1.8.2' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet                 --no-warn-script-location 'google-cloud-aiplatform' 'joblib' 'sklearn' 'kfp==1.8.2' --user) && \"$0\" \"$@\"",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef deploy_model(\n    model: Input[Model],\n    project: str,\n    region: str,\n    vertex_endpoint: Output[Artifact],\n    vertex_model: Output[Model]\n):\n    from google.cloud import aiplatform\n\n    aiplatform.init(project=project, location=region)\n\n    deployed_model = aiplatform.Model.upload(\n        display_name=\"beans-model-pipeline\",\n        artifact_uri = model.uri.replace(\"model\", \"\"),\n        serving_container_image_uri=\"us-docker.pkg.dev/vertex-ai/prediction/sklearn-cpu.0-24:latest\"\n    )\n    endpoint = deployed_model.deploy(machine_type=\"n1-standard-4\")\n\n    # Save data to the output params\n    vertex_endpoint.uri = endpoint.resource_name\n    vertex_model.uri = deployed_model.resource_name\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-get-dataframe": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "get_dataframe"
            ],
            "command": [
              "sh",
              "-c",
              "(python3 -m ensurepip || python3 -m ensurepip --user) && (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet                 --no-warn-script-location 'google-cloud-bigquery' 'pandas' 'pyarrow' 'kfp==1.8.2' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet                 --no-warn-script-location 'google-cloud-bigquery' 'pandas' 'pyarrow' 'kfp==1.8.2' --user) && \"$0\" \"$@\"",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef get_dataframe(\n    bq_table: str,\n    output_data_path: OutputPath(\"Dataset\")\n):\n    from google.cloud import bigquery\n    import pandas as pd\n\n    bqclient = bigquery.Client()\n    table = bigquery.TableReference.from_string(\n        bq_table\n    )\n    rows = bqclient.list_rows(\n        table\n    )\n    dataframe = rows.to_dataframe(\n        create_bqstorage_client=True,\n    )\n    dataframe = dataframe.sample(frac=1, random_state=2)\n    dataframe.to_csv(output_data_path)\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-sklearn-train": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "sklearn_train"
            ],
            "command": [
              "sh",
              "-c",
              "(python3 -m ensurepip || python3 -m ensurepip --user) && (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet                 --no-warn-script-location 'sklearn' 'pandas' 'joblib' 'kfp==1.8.2' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet                 --no-warn-script-location 'sklearn' 'pandas' 'joblib' 'kfp==1.8.2' --user) && \"$0\" \"$@\"",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef sklearn_train(\n    dataset: Input[Dataset],\n    metrics: Output[Metrics],\n    model: Output[Model]\n):\n    from sklearn.tree import DecisionTreeClassifier\n    from sklearn.metrics import roc_curve\n    from sklearn.model_selection import train_test_split\n    from joblib import dump\n\n    import pandas as pd\n    df = pd.read_csv(dataset.path)\n    labels = df.pop(\"churned\").tolist()\n    data = df.values.tolist()\n    x_train, x_test, y_train, y_test = train_test_split(data, labels)\n\n    skmodel = DecisionTreeClassifier()\n    skmodel.fit(x_train,y_train)\n    score = skmodel.score(x_test,y_test)\n    print('accuracy is:',score)\n\n    metrics.log_metric(\"accuracy\",(score * 100.0))\n    metrics.log_metric(\"framework\", \"Scikit Learn\")\n    metrics.log_metric(\"dataset_size\", len(df))\n    dump(skmodel, model.path + \".joblib\")\n\n"
            ],
            "image": "python:3.9"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "mlmd-pipeline"
    },
    "root": {
      "dag": {
        "outputs": {
          "artifacts": {
            "sklearn-train-metrics": {
              "artifactSelectors": [
                {
                  "outputArtifactKey": "metrics",
                  "producerSubtask": "sklearn-train"
                }
              ]
            }
          }
        },
        "tasks": {
          "deploy-model": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-deploy-model"
            },
            "dependentTasks": [
              "sklearn-train"
            ],
            "inputs": {
              "artifacts": {
                "model": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "model",
                    "producerTask": "sklearn-train"
                  }
                }
              },
              "parameters": {
                "project": {
                  "componentInputParameter": "project"
                },
                "region": {
                  "componentInputParameter": "region"
                }
              }
            },
            "taskInfo": {
              "name": "deploy-model"
            }
          },
          "get-dataframe": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-get-dataframe"
            },
            "inputs": {
              "parameters": {
                "bq_table": {
                  "componentInputParameter": "bq_table"
                }
              }
            },
            "taskInfo": {
              "name": "get-dataframe"
            }
          },
          "sklearn-train": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-sklearn-train"
            },
            "dependentTasks": [
              "get-dataframe"
            ],
            "inputs": {
              "artifacts": {
                "dataset": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "output_data_path",
                    "producerTask": "get-dataframe"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "sklearn-train"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "bq_table": {
            "type": "STRING"
          },
          "output_data_path": {
            "type": "STRING"
          },
          "project": {
            "type": "STRING"
          },
          "region": {
            "type": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "sklearn-train-metrics": {
            "artifactType": {
              "schemaTitle": "system.Metrics",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.2"
  },
  "runtimeConfig": {
    "gcsOutputDirectory": "gs://vertex-ai-dev-bucket/pipeline_root/",
    "parameters": {
      "bq_table": {
        "stringValue": ""
      },
      "output_data_path": {
        "stringValue": "data.csv"
      },
      "project": {
        "stringValue": "vertex-ai-dev"
      },
      "region": {
        "stringValue": "us-central1"
      }
    }
  }
}