# Reference:
# https://github.com/NVIDIA/NeMo-Framework-Launcher/blob/24.07/launcher_scripts/conf/training/llama/llama3_1_8b.yaml
name: llama3_1_8b_pretrain_a3mega
restore_from_path: null  # used when starting from a .nemo file

trainer:
  devices: 8
  num_nodes: 1
  accelerator: gpu
  precision: bf16
  logger: false  # logger provided by exp_manager
  enable_checkpointing: false
  use_distributed_sampler: false
  max_epochs: -1  # PTL default. In practice, max_steps will be reached first.
  max_steps: 30  # consumed_samples = global_step * micro_batch_size * data_parallel_size * accumulate_grad_batches
  log_every_n_steps: 1
  val_check_interval: null
  limit_val_batches: 1
  limit_test_batches: 1
  accumulate_grad_batches: 1  # do not modify, grad acc is automatic for training megatron models
  gradient_clip_val: 1.0
  benchmark: false
  enable_model_summary: false  # default PTL callback for this does not support model parallelism, instead we log manually

exp_manager:
  explicit_log_dir: null
  exp_dir: /data
  name: ${name}
  create_dllogger_logger: true
  dllogger_logger_kwargs:
    verbose: true
    stdout: true
    json_file: "/data/dllogger.json"
  create_wandb_logger: false
  wandb_logger_kwargs:
    project: null
    name: null
  resume_if_exists: true
  resume_ignore_no_checkpoint: true
  create_checkpoint_callback: false
  checkpoint_callback_params:
    monitor: val_loss
    save_top_k: 3
    mode: min
    always_save_nemo: false  # saves nemo file during validation, not implemented for model parallel
    save_nemo_on_train_end: false  # not recommended when training large models on clusters with short time limits
    filename: 'megatron_gpt--{val_loss:.2f}-{step}-{consumed_samples}'
    model_parallel_size: ${multiply:${model.tensor_model_parallel_size}, ${model.pipeline_model_parallel_size}}
  seconds_to_sleep: 5  # Allows node_rank!=0 to sleep and let node0 to init, like preparing data

model:
  mcore_gpt: true
  # specify micro_batch_size, global_batch_size, and model parallelism
  # gradient accumulation will be done automatically based on data_parallel_size
  micro_batch_size: 1  # limited by GPU memory
  global_batch_size: 1024  # will use more micro batches to reach global batch size
  tensor_model_parallel_size: 1  # intra-layer model parallelism
  pipeline_model_parallel_size: 2  # inter-layer model parallelism
  context_parallel_size: 1
  virtual_pipeline_model_parallel_size: null  # interleaved pipeline
  ## Sequence Parallelism
  # Makes tensor parallelism more memory efficient for LLMs (20B+) by parallelizing layer norms and dropout sequentially
  # See Reducing Activation Recomputation in Large Transformer Models: https://arxiv.org/abs/2205.05198 for more details.
  sequence_parallel: false

  fsdp: false
  fsdp_cpu_offload: true
  fsdp_sharding_strategy: "full"  # Method to shard model states. Available options are 'full', 'hybrid', and 'grad'.
  fsdp_grad_reduce_dtype: "16"  # Gradient reduction data type.
  fsdp_sharded_checkpoint: false  # Store and load FSDP shared checkpoint.
  fsdp_use_orig_params: false  # Set to True to use FSDP for specific peft scheme.

  # Distributed checkpoint setup
  dist_ckpt_format: "torch_dist"  # Set to 'torch_dist' to use PyTorch distributed checkpoint format.
  dist_ckpt_load_on_device: true  # whether to load checkpoint weights directly on GPU or to CPU
  dist_ckpt_parallel_save: true  # if true, each worker will write its own part of the dist checkpoint
  dist_ckpt_parallel_save_within_dp: false  # if true, save will be parallelized only within a DP group (whole world otherwise), which might slightly reduce the save overhead
  dist_ckpt_parallel_load: false  # if true, each worker will load part of the dist checkpoint and exchange with NCCL. Might use some extra GPU memory
  dist_ckpt_torch_dist_multiproc: 2  # number of extra processes per rank used during ckpt save with PyTorch distributed format
  dist_ckpt_assume_constant_structure: false  # set to True only if the state dict structure doesn't change within a single job. Allows caching some computation across checkpoint saves.
  dist_ckpt_parallel_dist_opt: true  # parallel save/load of a DistributedOptimizer. 'True' allows performant save and reshardable checkpoints. Set to 'False' only in order to minimize the number of checkpoint files.
  dist_ckpt_load_strictness: null  # defines checkpoint keys mismatch behavior (only during dist-ckpt load). Choices: assume_ok_unexpected (default - try loading without any check), log_all (log mismatches), raise_all (raise mismatches)

  # model architecture
  encoder_seq_length: 8192
  max_position_embeddings: ${.encoder_seq_length}
  num_layers: 32  # 8b: 32 | 70b: 80 | 405b: 126
  hidden_size: 4096  # 8b: 4096 | 70b: 8192 | 405b: 16384
  ffn_hidden_size: 14336  # 8b: 14336 | 70b: 28672 | 405b: 53248
  num_attention_heads: 32  # 8b: 32 | 70b: 64 | 405b: 128
  num_query_groups: 8  # Number of query groups for group query attention. If None, normal attention is used. 8b: 8 | 70b: 8 | 405b: 16
  init_method_std: 0.01  # Standard deviation of the zero mean normal distribution used for weight initialization.  8b: 0.01 | 70b: 0.008944 | 405b: 0.02
  use_scaled_init_method: true  # use scaled residuals initialization
  hidden_dropout: 0.0  # Dropout probability for hidden state transformer.
  attention_dropout: 0.0  # Dropout probability for attention
  ffn_dropout: 0.0  # Dropout probability in the feed-forward layer.
  kv_channels: null  # Projection weights dimension in multi-head attention. Set to hidden_size // num_attention_heads if null
  apply_query_key_layer_scaling: true  # scale Q * K^T by 1 / layer-number.
  normalization: 'rmsnorm'  # Normalization layer to use. Options are 'layernorm', 'rmsnorm'
  layernorm_epsilon: 1e-5
  do_layer_norm_weight_decay: false  # True means weight decay on all params
  make_vocab_size_divisible_by: 128  # Pad the vocab size to be divisible by this value for computation efficiency.
  pre_process: true  # add embedding
  post_process: true  # add pooler
  persist_layer_norm: true  # Use of persistent fused layer norm kernel.
  bias: false  # Whether to use bias terms in all weight matrices.
  activation: 'fast-swiglu'  # Options ['gelu', 'geglu', 'swiglu', 'reglu', 'squared-relu', 'fast-geglu', 'fast-swiglu', 'fast-reglu']
  headscale: false  # Whether to learn extra parameters that scale the output of the each self-attention head.
  transformer_block_type: 'pre_ln'  # Options ['pre_ln', 'post_ln', 'normformer']
  openai_gelu: false  # Use OpenAI's GELU instead of the default GeLU
  normalize_attention_scores: true  # Whether to scale the output Q * K^T by 1 / sqrt(hidden_size_per_head). This arg is provided as a configuration option mostly for compatibility with models that have been weight-converted from HF. You almost always want to se this to True.
  position_embedding_type: 'rope'  # Position embedding type. Options ['learned_absolute', 'rope']
  rotary_percentage: 1.0  # If using position_embedding_type=rope, then the per head dim is multiplied by this.
  attention_type: 'multihead'  # Attention type. Options ['multihead']
  share_embeddings_and_output_weights: false  # Share embedding and output layer weights.
  scale_positional_embedding: true  # This is false for llama3 models. Only used for >= llama3.1.

  # Use GPT2BPETokenizer for test, because the testing dataset is tokenized by this tokenizer.
  # https://docs.nvidia.com/nemo-framework/user-guide/24.07/playbooks/singlenodepretrain.html#data-download-and-pre-processing
  tokenizer:
    library: megatron
    type: GPT2BPETokenizer
    model: null  # /path/to/tokenizer.model
    vocab_file: null
    merge_file: null
    delimiter: null  # only used for tabular tokenizer
    sentencepiece_legacy: false  # Legacy=True allows you to add special tokens to sentencepiece tokenizers.

  # Mixed precision
  native_amp_init_scale: 4294967296  # 2 ** 32
  native_amp_growth_interval: 1000
  hysteresis: 2  # Gradient scale hysteresis
  fp32_residual_connection: false  # Move residual connections to fp32
  fp16_lm_cross_entropy: false  # Move the cross entropy unreduced loss calculation for lm head to fp16

  # Megatron O2-style half-precision
  megatron_amp_O2: true  # Enable O2-level automatic mixed precision using main parameters
  grad_allreduce_chunk_size_mb: 125

  # Fusion
  grad_div_ar_fusion: true  # Fuse grad division into torch.distributed.all_reduce. Only used with O2 and no pipeline parallelism..
  gradient_accumulation_fusion: true  # Fuse weight gradient accumulation to GEMMs. Only used with pipeline parallelism and O2.
  bias_activation_fusion: true  # Use a kernel that fuses the bias addition from weight matrices with the subsequent activation function.
  bias_dropout_add_fusion: true  # Use a kernel that fuses the bias addition, dropout and residual connection addition.
  masked_softmax_fusion: true  # Use a kernel that fuses the attention softmax with it's mask.
  apply_rope_fusion: true  # Use a kernel to add rotary positional embeddings. Only used if position_embedding_type=rope
  cross_entropy_loss_fusion: true

  # Miscellaneous
  seed: 1234
  resume_from_checkpoint: null  # manually set the checkpoint file to load from
  use_cpu_initialization: false  # Init weights on the CPU (slow for large models)
  onnx_safe: false  # Use work-arounds for known problems with Torch ONNX exporter.
  apex_transformer_log_level: 30  # Python logging level displays logs with severity greater than or equal to this
  gradient_as_bucket_view: true  # PyTorch DDP argument. Allocate gradients in a contiguous bucket to save memory (less fragmentation and buffer memory)
  sync_batch_comm: false  # Enable stream synchronization after each p2p communication between pipeline stages

  ## Activation Checkpointing
  # NeMo Megatron supports 'selective' activation checkpointing where only the memory intensive part of attention is checkpointed.
  # These memory intensive activations are also less compute intensive which makes activation checkpointing more efficient for LLMs (20B+).
  # See Reducing Activation Recomputation in Large Transformer Models: https://arxiv.org/abs/2205.05198 for more details.
  # 'full' will checkpoint the entire transformer layer.
  activations_checkpoint_granularity: null  # 'selective' or 'full'
  activations_checkpoint_method: null  # 'uniform', 'block'
  # 'uniform' divides the total number of transformer layers and checkpoints the input activation
  # of each chunk at the specified granularity. When used with 'selective', 'uniform' checkpoints all attention blocks in the model.
  # 'block' checkpoints the specified number of layers per pipeline stage at the specified granularity
  activations_checkpoint_num_layers: null
  # when using 'uniform' this creates groups of transformer layers to checkpoint. Usually set to 1. Increase to save more memory.
  # when using 'block' this this will checkpoint the first activations_checkpoint_num_layers per pipeline stage.
  num_micro_batches_with_partial_activation_checkpoints: null
  # This feature is valid only when used with pipeline-model-parallelism.
  # When an integer value is provided, it sets the number of micro-batches where only a partial number of Transformer layers get checkpointed
  # and recomputed within a window of micro-batches. The rest of micro-batches in the window checkpoint all Transformer layers. The size of window is
  # set by the maximum outstanding micro-batch backpropagations, which varies at different pipeline stages. The number of partial layers to checkpoint
  # per micro-batch is set by 'activations_checkpoint_num_layers' with 'activations_checkpoint_method' of 'block'.
  # This feature enables using activation checkpoint at a fraction of micro-batches up to the point of full GPU memory usage.
  activations_checkpoint_layers_per_pipeline: null
  # This feature is valid only when used with pipeline-model-parallelism.
  # When an integer value (rounded down when float is given) is provided, it sets the number of Transformer layers to skip checkpointing at later
  # pipeline stages. For example, 'activations_checkpoint_layers_per_pipeline' of 3 makes pipeline stage 1 to checkpoint 3 layers less than
  # stage 0 and stage 2 to checkpoint 6 layers less stage 0, and so on. This is possible because later pipeline stage
  # uses less GPU memory with fewer outstanding micro-batch backpropagations. Used with 'num_micro_batches_with_partial_activation_checkpoints',
  # this feature removes most of activation checkpoints at the last pipeline stage, which is the critical execution path.

  ## Transformer Engine
  transformer_engine: true
  fp8: false  # enables fp8 in TransformerLayer forward
  fp8_e4m3: false  # sets fp8_format = recipe.Format.E4M3
  fp8_hybrid: false  # sets fp8_format = recipe.Format.HYBRID
  fp8_margin: 0  # scaling margin
  fp8_interval: 1  # scaling update interval
  fp8_amax_history_len: 1024  # Number of steps for which amax history is recorded per tensor
  fp8_amax_compute_algo: 'max'  # 'most_recent' or 'max'. Algorithm for computing amax from history
  ub_tp_comm_overlap: false  # do not turn on because of b/397797926
  use_flash_attention: true
  gc_interval: 100

  ## Offloading Activations/Weights to CPU
  cpu_offloading: false
  cpu_offloading_num_layers: ${sum:${.num_layers},-1}  # This value should be between [1,num_layers-1] as we don't want to offload the final layer's activations and expose any offloading duration for the final layer
  cpu_offloading_activations: true
  cpu_offloading_weights: true

  data:
    # Path to data must be specified by the user.
    # Supports List, String and Dictionary
    # List : can override from the CLI: "model.data.data_prefix=[.5,/raid/data/pile/my-gpt3_00_text_document,.5,/raid/data/pile/my-gpt3_01_text_document]",
    # Or see example below:
    # data_prefix:
    # - .5
    # - /raid/data/pile/my-gpt3_00_text_document
    # - .5
    # - /raid/data/pile/my-gpt3_01_text_document
    # Dictionary: can override from CLI "model.data.data_prefix"={"train":[1.0, /path/to/data], "validation":/path/to/data, "test":/path/to/test}
    # Or see example below:
    # "model.data.data_prefix: {train:[1.0,/path/to/data], validation:[/path/to/data], test:[/path/to/test]}"
    data_prefix: [1.0, /data/hfbpe_gpt_training_data_text_document]
    index_mapping_dir: null  # path to save index mapping .npy files, by default will save in the same location as data_prefix
    data_impl: mmap
    splits_string: 900,50,50
    seq_length: ${model.encoder_seq_length}
    skip_warmup: true
    num_workers: 2
    dataloader_type: single  # cyclic
    reset_position_ids: false  # Reset position ids after end-of-document token
    reset_attention_mask: false  # Reset attention mask after end-of-document token
    eod_mask_loss: false  # Mask loss for the end of document tokens
    validation_drop_last: true  # Set to false if the last partial validation samples is to be consumed
    no_seqlen_plus_one_input_tokens: false  # Set to True to disable fetching (sequence length + 1) input tokens, instead get (sequence length) input tokens and mask the last token
    pad_samples_to_global_batch_size: false  # Set to True if you want to pad the last partial batch with -1's to equal global batch size
    shuffle_documents: true  # Set to False to disable documents shuffling. Sample index will still be shuffled

  # Nsys profiling options
  nsys_profile:
    enabled: false
    start_step: 0  # Global batch to start profiling
    end_step: 1  # Global batch to end profiling
    ranks: [0]  # Global rank IDs to profile
    gen_shape: false  # Generate model and kernel details including input shapes

  memory_profile:
    enabled: false
    start_step: 0
    end_step: 1
    ranks: [0]
    output_path: /data  # Must be a dir

  optim:
    name: distributed_fused_adam  # E.g., fused_adam or set _target_: torch.optim.AdamW field
    lr: 2e-5
    weight_decay: 0.01
    betas:
    - 0.9
    - 0.98
    bucket_cap_mb: 125
    overlap_grad_sync: true
    overlap_param_sync: true
    contiguous_grad_buffer: true
    contiguous_param_buffer: true
    sched:
      name: CosineAnnealing
      warmup_steps: 400
      constant_steps: 0
      min_lr: 2e-6
