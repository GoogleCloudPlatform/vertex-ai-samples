name: Split rows into subsets
description: Splits the data table according to the split fractions.
metadata:
  annotations: {author: Alexey Volkov <alexey.volkov@ark-kun.com>, canonical_location: 'https://raw.githubusercontent.com/Ark-kun/pipeline_components/master/components/dataset_manipulation/Split_rows_into_subsets/in_CSV/component.yaml'}
inputs:
- {name: table, type: CSV}
- {name: fraction_1, type: Float, description: 'The proportion of the lines to put
    into the 1st split. Range: [0, 1]'}
- name: fraction_2
  type: Float
  description: |-
    The proportion of the lines to put into the 2nd split. Range: [0, 1]
    If fraction_2 is not specified, then fraction_2 = 1 - fraction_1.
    The remaining lines go to the 3rd split (if any).
  optional: true
- {name: random_seed, type: Integer, default: '0', optional: true}
outputs:
- {name: split_1, type: CSV}
- {name: split_2, type: CSV}
- {name: split_3, type: CSV}
- {name: split_1_count, type: Integer}
- {name: split_2_count, type: Integer}
- {name: split_3_count, type: Integer}
implementation:
  container:
    image: python:3.9
    command:
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      def split_rows_into_subsets(
          table_path,
          split_1_path,
          split_2_path,
          split_3_path,
          fraction_1,
          fraction_2 = None,
          random_seed = 0,
      ):
          """Splits the data table according to the split fractions.

          Args:
              fraction_1: The proportion of the lines to put into the 1st split. Range: [0, 1]
              fraction_2: The proportion of the lines to put into the 2nd split. Range: [0, 1]
                  If fraction_2 is not specified, then fraction_2 = 1 - fraction_1.
                  The remaining lines go to the 3rd split (if any).
          """
          import random

          random.seed(random_seed)

          SHUFFLE_BUFFER_SIZE = 10000

          num_splits = 3

          if fraction_1 < 0 or fraction_1 > 1:
              raise ValueError("fraction_1 must be in between 0 and 1.")

          if fraction_2 is None:
              fraction_2 = 1 - fraction_1
          if fraction_2 < 0 or fraction_2 > 1:
              raise ValueError("fraction_2 must be in between 0 and 1.")

          fraction_3 = 1 - fraction_1 - fraction_2

          fractions = [
              fraction_1,
              fraction_2,
              fraction_3,
          ]

          assert sum(fractions) == 1

          written_line_counts = [0] * num_splits

          output_files = [
              open(split_1_path, "wb"),
              open(split_2_path, "wb"),
              open(split_3_path, "wb"),
          ]

          with open(table_path, "rb") as input_file:
              # Writing the headers
              header_line = input_file.readline()
              for output_file in output_files:
                  output_file.write(header_line)

              while True:
                  line_buffer = []
                  for i in range(SHUFFLE_BUFFER_SIZE):
                      line = input_file.readline()
                      if not line:
                          break
                      line_buffer.append(line)

                  # We need to exactly partition the lines between the output files
                  # To overcome possible systematic bias, we could calculate the total numbers
                  # of lines written to each file and take that into account.
                  num_read_lines = len(line_buffer)
                  number_of_lines_for_files = [0] * num_splits
                  # List that will have the index of the destination file for each line
                  file_index_for_line = []
                  remaining_lines = num_read_lines
                  remaining_fraction = 1
                  for i in range(num_splits):
                      number_of_lines_for_file = (
                          round(remaining_lines * (fractions[i] / remaining_fraction))
                          if remaining_fraction > 0
                          else 0
                      )
                      number_of_lines_for_files[i] = number_of_lines_for_file
                      remaining_lines -= number_of_lines_for_file
                      remaining_fraction -= fractions[i]
                      file_index_for_line.extend([i] * number_of_lines_for_file)

                  assert remaining_lines == 0, f"{remaining_lines}"
                  assert len(file_index_for_line) == num_read_lines

                  random.shuffle(file_index_for_line)

                  for i in range(num_read_lines):
                      output_files[file_index_for_line[i]].write(line_buffer[i])
                      written_line_counts[file_index_for_line[i]] += 1

                  # Exit if the file ended before we were able to fully fill the buffer
                  if len(line_buffer) != SHUFFLE_BUFFER_SIZE:
                      break

          for output_file in output_files:
              output_file.close()

          return written_line_counts

      def _serialize_int(int_value: int) -> str:
          if isinstance(int_value, str):
              return int_value
          if not isinstance(int_value, int):
              raise TypeError('Value "{}" has type "{}" instead of int.'.format(str(int_value), str(type(int_value))))
          return str(int_value)

      import argparse
      _parser = argparse.ArgumentParser(prog='Split rows into subsets', description='Splits the data table according to the split fractions.')
      _parser.add_argument("--table", dest="table_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--fraction-1", dest="fraction_1", type=float, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--fraction-2", dest="fraction_2", type=float, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--random-seed", dest="random_seed", type=int, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--split-1", dest="split_1_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--split-2", dest="split_2_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--split-3", dest="split_3_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=3)
      _parsed_args = vars(_parser.parse_args())
      _output_files = _parsed_args.pop("_output_paths", [])

      _outputs = split_rows_into_subsets(**_parsed_args)

      _output_serializers = [
          _serialize_int,
          _serialize_int,
          _serialize_int,

      ]

      import os
      for idx, output_file in enumerate(_output_files):
          try:
              os.makedirs(os.path.dirname(output_file))
          except OSError:
              pass
          with open(output_file, 'w') as f:
              f.write(_output_serializers[idx](_outputs[idx]))
    args:
    - --table
    - {inputPath: table}
    - --fraction-1
    - {inputValue: fraction_1}
    - if:
        cond: {isPresent: fraction_2}
        then:
        - --fraction-2
        - {inputValue: fraction_2}
    - if:
        cond: {isPresent: random_seed}
        then:
        - --random-seed
        - {inputValue: random_seed}
    - --split-1
    - {outputPath: split_1}
    - --split-2
    - {outputPath: split_2}
    - --split-3
    - {outputPath: split_3}
    - '----output-paths'
    - {outputPath: split_1_count}
    - {outputPath: split_2_count}
    - {outputPath: split_3_count}
