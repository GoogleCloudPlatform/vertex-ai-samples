name: Xgboost predict on CSV
description: Makes predictions using a trained XGBoost model.
metadata:
  annotations: {author: Alexey Volkov <alexey.volkov@ark-kun.com>, canonical_location: 'https://raw.githubusercontent.com/Ark-kun/pipeline_components/master/components/XGBoost/Predict/component.yaml'}
inputs:
- {name: data, type: CSV, description: Feature data in Apache Parquet format.}
- {name: model, type: XGBoostModel, description: Trained model in binary XGBoost format.}
- {name: label_column_name, type: String, description: Optional. Name of the column
    containing the label data that is excluded during the prediction., optional: true}
outputs:
- {name: predictions, description: Model predictions.}
implementation:
  container:
    image: python:3.10
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'xgboost==1.6.1' 'pandas==1.4.3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3
      -m pip install --quiet --no-warn-script-location 'xgboost==1.6.1' 'pandas==1.4.3'
      --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      def xgboost_predict_on_CSV(
          data_path,
          model_path,
          predictions_path,
          label_column_name = None,
      ):
          """Makes predictions using a trained XGBoost model.

          Args:
              data_path: Feature data in Apache Parquet format.
              model_path: Trained model in binary XGBoost format.
              predictions_path: Model predictions.
              label_column_name: Optional. Name of the column containing the label data that is excluded during the prediction.

          Annotations:
              author: Alexey Volkov <alexey.volkov@ark-kun.com>
          """
          from pathlib import Path

          import numpy
          import pandas
          import xgboost

          df = pandas.read_csv(
              data_path,
          ).convert_dtypes()
          print("Evaluation data information:")
          df.info(verbose=True)
          # Converting column types that XGBoost does not support
          for column_name, dtype in df.dtypes.items():
              if dtype in ["string", "object"]:
                  print(f"Treating the {dtype.name} column '{column_name}' as categorical.")
                  df[column_name] = df[column_name].astype("category")
                  print(f"Inferred {len(df[column_name].cat.categories)} categories for the '{column_name}' column.")
              # Working around the XGBoost issue with nullable floats: https://github.com/dmlc/xgboost/issues/8213
              if pandas.api.types.is_float_dtype(dtype):
                  # Converting from "Float64" to "float64"
                  df[column_name] = df[column_name].astype(dtype.name.lower())
          print("Final evaluation data information:")
          df.info(verbose=True)

          if label_column_name is not None:
              df = df.drop(columns=[label_column_name])

          testing_data = xgboost.DMatrix(
              data=df,
              enable_categorical=True,
          )

          model = xgboost.Booster(model_file=model_path)

          predictions = model.predict(testing_data)

          Path(predictions_path).parent.mkdir(parents=True, exist_ok=True)
          numpy.savetxt(predictions_path, predictions)

      import argparse
      _parser = argparse.ArgumentParser(prog='Xgboost predict on CSV', description='Makes predictions using a trained XGBoost model.')
      _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--model", dest="model_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--label-column-name", dest="label_column_name", type=str, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--predictions", dest="predictions_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = xgboost_predict_on_CSV(**_parsed_args)
    args:
    - --data
    - {inputPath: data}
    - --model
    - {inputPath: model}
    - if:
        cond: {isPresent: label_column_name}
        then:
        - --label-column-name
        - {inputValue: label_column_name}
    - --predictions
    - {outputPath: predictions}
